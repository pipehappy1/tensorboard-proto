// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/layout.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Chart {
    // message fields
    pub title: ::std::string::String,
    // message oneof groups
    pub content: ::std::option::Option<Chart_oneof_content>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Chart {
    fn default() -> &'a Chart {
        <Chart as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Chart_oneof_content {
    multiline(MultilineChartContent),
    margin(MarginChartContent),
}

impl Chart {
    pub fn new() -> Chart {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // .tensorboardrs.MultilineChartContent multiline = 2;


    pub fn get_multiline(&self) -> &MultilineChartContent {
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::multiline(ref v)) => v,
            _ => <MultilineChartContent as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multiline(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_multiline(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::multiline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multiline(&mut self, v: MultilineChartContent) {
        self.content = ::std::option::Option::Some(Chart_oneof_content::multiline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multiline(&mut self) -> &mut MultilineChartContent {
        if let ::std::option::Option::Some(Chart_oneof_content::multiline(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(Chart_oneof_content::multiline(MultilineChartContent::new()));
        }
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::multiline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multiline(&mut self) -> MultilineChartContent {
        if self.has_multiline() {
            match self.content.take() {
                ::std::option::Option::Some(Chart_oneof_content::multiline(v)) => v,
                _ => panic!(),
            }
        } else {
            MultilineChartContent::new()
        }
    }

    // .tensorboardrs.MarginChartContent margin = 3;


    pub fn get_margin(&self) -> &MarginChartContent {
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::margin(ref v)) => v,
            _ => <MarginChartContent as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_margin(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_margin(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::margin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_margin(&mut self, v: MarginChartContent) {
        self.content = ::std::option::Option::Some(Chart_oneof_content::margin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_margin(&mut self) -> &mut MarginChartContent {
        if let ::std::option::Option::Some(Chart_oneof_content::margin(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(Chart_oneof_content::margin(MarginChartContent::new()));
        }
        match self.content {
            ::std::option::Option::Some(Chart_oneof_content::margin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_margin(&mut self) -> MarginChartContent {
        if self.has_margin() {
            match self.content.take() {
                ::std::option::Option::Some(Chart_oneof_content::margin(v)) => v,
                _ => panic!(),
            }
        } else {
            MarginChartContent::new()
        }
    }
}

impl ::protobuf::Message for Chart {
    fn is_initialized(&self) -> bool {
        if let Some(Chart_oneof_content::multiline(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Chart_oneof_content::margin(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(Chart_oneof_content::multiline(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(Chart_oneof_content::margin(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &Chart_oneof_content::multiline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Chart_oneof_content::margin(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &Chart_oneof_content::multiline(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Chart_oneof_content::margin(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Chart {
        Chart::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Chart| { &m.title },
                |m: &mut Chart| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MultilineChartContent>(
                "multiline",
                Chart::has_multiline,
                Chart::get_multiline,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MarginChartContent>(
                "margin",
                Chart::has_margin,
                Chart::get_margin,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Chart>(
                "Chart",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Chart {
        static instance: ::protobuf::rt::LazyV2<Chart> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Chart::new)
    }
}

impl ::protobuf::Clear for Chart {
    fn clear(&mut self) {
        self.title.clear();
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Chart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Chart {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MultilineChartContent {
    // message fields
    pub tag: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MultilineChartContent {
    fn default() -> &'a MultilineChartContent {
        <MultilineChartContent as ::protobuf::Message>::default_instance()
    }
}

impl MultilineChartContent {
    pub fn new() -> MultilineChartContent {
        ::std::default::Default::default()
    }

    // repeated string tag = 1;


    pub fn get_tag(&self) -> &[::std::string::String] {
        &self.tag
    }
    pub fn clear_tag(&mut self) {
        self.tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tag = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tag(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tag
    }

    // Take field
    pub fn take_tag(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tag, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MultilineChartContent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tag {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tag {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MultilineChartContent {
        MultilineChartContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag",
                |m: &MultilineChartContent| { &m.tag },
                |m: &mut MultilineChartContent| { &mut m.tag },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MultilineChartContent>(
                "MultilineChartContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MultilineChartContent {
        static instance: ::protobuf::rt::LazyV2<MultilineChartContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MultilineChartContent::new)
    }
}

impl ::protobuf::Clear for MultilineChartContent {
    fn clear(&mut self) {
        self.tag.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MultilineChartContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MultilineChartContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MarginChartContent {
    // message fields
    pub series: ::protobuf::RepeatedField<MarginChartContent_Series>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MarginChartContent {
    fn default() -> &'a MarginChartContent {
        <MarginChartContent as ::protobuf::Message>::default_instance()
    }
}

impl MarginChartContent {
    pub fn new() -> MarginChartContent {
        ::std::default::Default::default()
    }

    // repeated .tensorboardrs.MarginChartContent.Series series = 1;


    pub fn get_series(&self) -> &[MarginChartContent_Series] {
        &self.series
    }
    pub fn clear_series(&mut self) {
        self.series.clear();
    }

    // Param is passed by value, moved
    pub fn set_series(&mut self, v: ::protobuf::RepeatedField<MarginChartContent_Series>) {
        self.series = v;
    }

    // Mutable pointer to the field.
    pub fn mut_series(&mut self) -> &mut ::protobuf::RepeatedField<MarginChartContent_Series> {
        &mut self.series
    }

    // Take field
    pub fn take_series(&mut self) -> ::protobuf::RepeatedField<MarginChartContent_Series> {
        ::std::mem::replace(&mut self.series, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MarginChartContent {
    fn is_initialized(&self) -> bool {
        for v in &self.series {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.series)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.series {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MarginChartContent {
        MarginChartContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MarginChartContent_Series>>(
                "series",
                |m: &MarginChartContent| { &m.series },
                |m: &mut MarginChartContent| { &mut m.series },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MarginChartContent>(
                "MarginChartContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MarginChartContent {
        static instance: ::protobuf::rt::LazyV2<MarginChartContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MarginChartContent::new)
    }
}

impl ::protobuf::Clear for MarginChartContent {
    fn clear(&mut self) {
        self.series.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MarginChartContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MarginChartContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MarginChartContent_Series {
    // message fields
    pub value: ::std::string::String,
    pub lower: ::std::string::String,
    pub upper: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MarginChartContent_Series {
    fn default() -> &'a MarginChartContent_Series {
        <MarginChartContent_Series as ::protobuf::Message>::default_instance()
    }
}

impl MarginChartContent_Series {
    pub fn new() -> MarginChartContent_Series {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // string lower = 2;


    pub fn get_lower(&self) -> &str {
        &self.lower
    }
    pub fn clear_lower(&mut self) {
        self.lower.clear();
    }

    // Param is passed by value, moved
    pub fn set_lower(&mut self, v: ::std::string::String) {
        self.lower = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lower(&mut self) -> &mut ::std::string::String {
        &mut self.lower
    }

    // Take field
    pub fn take_lower(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lower, ::std::string::String::new())
    }

    // string upper = 3;


    pub fn get_upper(&self) -> &str {
        &self.upper
    }
    pub fn clear_upper(&mut self) {
        self.upper.clear();
    }

    // Param is passed by value, moved
    pub fn set_upper(&mut self, v: ::std::string::String) {
        self.upper = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upper(&mut self) -> &mut ::std::string::String {
        &mut self.upper
    }

    // Take field
    pub fn take_upper(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upper, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MarginChartContent_Series {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lower)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upper)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if !self.lower.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.lower);
        }
        if !self.upper.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.upper);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if !self.lower.is_empty() {
            os.write_string(2, &self.lower)?;
        }
        if !self.upper.is_empty() {
            os.write_string(3, &self.upper)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MarginChartContent_Series {
        MarginChartContent_Series::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &MarginChartContent_Series| { &m.value },
                |m: &mut MarginChartContent_Series| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lower",
                |m: &MarginChartContent_Series| { &m.lower },
                |m: &mut MarginChartContent_Series| { &mut m.lower },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upper",
                |m: &MarginChartContent_Series| { &m.upper },
                |m: &mut MarginChartContent_Series| { &mut m.upper },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MarginChartContent_Series>(
                "MarginChartContent.Series",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MarginChartContent_Series {
        static instance: ::protobuf::rt::LazyV2<MarginChartContent_Series> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MarginChartContent_Series::new)
    }
}

impl ::protobuf::Clear for MarginChartContent_Series {
    fn clear(&mut self) {
        self.value.clear();
        self.lower.clear();
        self.upper.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MarginChartContent_Series {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MarginChartContent_Series {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Category {
    // message fields
    pub title: ::std::string::String,
    pub chart: ::protobuf::RepeatedField<Chart>,
    pub closed: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Category {
    fn default() -> &'a Category {
        <Category as ::protobuf::Message>::default_instance()
    }
}

impl Category {
    pub fn new() -> Category {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // repeated .tensorboardrs.Chart chart = 2;


    pub fn get_chart(&self) -> &[Chart] {
        &self.chart
    }
    pub fn clear_chart(&mut self) {
        self.chart.clear();
    }

    // Param is passed by value, moved
    pub fn set_chart(&mut self, v: ::protobuf::RepeatedField<Chart>) {
        self.chart = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chart(&mut self) -> &mut ::protobuf::RepeatedField<Chart> {
        &mut self.chart
    }

    // Take field
    pub fn take_chart(&mut self) -> ::protobuf::RepeatedField<Chart> {
        ::std::mem::replace(&mut self.chart, ::protobuf::RepeatedField::new())
    }

    // bool closed = 3;


    pub fn get_closed(&self) -> bool {
        self.closed
    }
    pub fn clear_closed(&mut self) {
        self.closed = false;
    }

    // Param is passed by value, moved
    pub fn set_closed(&mut self, v: bool) {
        self.closed = v;
    }
}

impl ::protobuf::Message for Category {
    fn is_initialized(&self) -> bool {
        for v in &self.chart {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chart)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.closed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        for value in &self.chart {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.closed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        for v in &self.chart {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.closed != false {
            os.write_bool(3, self.closed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Category {
        Category::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Category| { &m.title },
                |m: &mut Category| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Chart>>(
                "chart",
                |m: &Category| { &m.chart },
                |m: &mut Category| { &mut m.chart },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "closed",
                |m: &Category| { &m.closed },
                |m: &mut Category| { &mut m.closed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Category>(
                "Category",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Category {
        static instance: ::protobuf::rt::LazyV2<Category> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Category::new)
    }
}

impl ::protobuf::Clear for Category {
    fn clear(&mut self) {
        self.title.clear();
        self.chart.clear();
        self.closed = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Category {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Category {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Layout {
    // message fields
    pub version: i32,
    pub category: ::protobuf::RepeatedField<Category>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Layout {
    fn default() -> &'a Layout {
        <Layout as ::protobuf::Message>::default_instance()
    }
}

impl Layout {
    pub fn new() -> Layout {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // repeated .tensorboardrs.Category category = 2;


    pub fn get_category(&self) -> &[Category] {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::protobuf::RepeatedField<Category>) {
        self.category = v;
    }

    // Mutable pointer to the field.
    pub fn mut_category(&mut self) -> &mut ::protobuf::RepeatedField<Category> {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::protobuf::RepeatedField<Category> {
        ::std::mem::replace(&mut self.category, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Layout {
    fn is_initialized(&self) -> bool {
        for v in &self.category {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.category)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.category {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        for v in &self.category {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Layout {
        Layout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &Layout| { &m.version },
                |m: &mut Layout| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Category>>(
                "category",
                |m: &Layout| { &m.category },
                |m: &mut Layout| { &mut m.category },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Layout>(
                "Layout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Layout {
        static instance: ::protobuf::rt::LazyV2<Layout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Layout::new)
    }
}

impl ::protobuf::Clear for Layout {
    fn clear(&mut self) {
        self.version = 0;
        self.category.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Layout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Layout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10src/layout.proto\x12\rtensorboardrs\"\xab\x01\n\x05Chart\x12\x14\n\
    \x05title\x18\x01\x20\x01(\tR\x05title\x12D\n\tmultiline\x18\x02\x20\x01\
    (\x0b2$.tensorboardrs.MultilineChartContentH\0R\tmultiline\x12;\n\x06mar\
    gin\x18\x03\x20\x01(\x0b2!.tensorboardrs.MarginChartContentH\0R\x06margi\
    nB\t\n\x07content\")\n\x15MultilineChartContent\x12\x10\n\x03tag\x18\x01\
    \x20\x03(\tR\x03tag\"\xa2\x01\n\x12MarginChartContent\x12@\n\x06series\
    \x18\x01\x20\x03(\x0b2(.tensorboardrs.MarginChartContent.SeriesR\x06seri\
    es\x1aJ\n\x06Series\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\x12\
    \x14\n\x05lower\x18\x02\x20\x01(\tR\x05lower\x12\x14\n\x05upper\x18\x03\
    \x20\x01(\tR\x05upper\"d\n\x08Category\x12\x14\n\x05title\x18\x01\x20\
    \x01(\tR\x05title\x12*\n\x05chart\x18\x02\x20\x03(\x0b2\x14.tensorboardr\
    s.ChartR\x05chart\x12\x16\n\x06closed\x18\x03\x20\x01(\x08R\x06closed\"W\
    \n\x06Layout\x12\x18\n\x07version\x18\x01\x20\x01(\x05R\x07version\x123\
    \n\x08category\x18\x02\x20\x03(\x0b2\x17.tensorboardrs.CategoryR\x08cate\
    goryJ\xfb\x18\n\x06\x12\x04\x0f\0_\x01\n\x9f\x05\n\x01\x0c\x12\x03\x0f\0\
    \x122\x94\x05\x20Copyright\x202017\x20The\x20TensorFlow\x20Authors.\x20A\
    ll\x20Rights\x20Reserved.\n\nLicensed\x20under\x20the\x20Apache\x20Licen\
    se,\x20Version\x202.0\x20(the\x20\"License\");\nyou\x20may\x20not\x20use\
    \x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License\
    .\nYou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\nht\
    tp://www.apache.org/licenses/LICENSE-2.0\n\nUnless\x20required\x20by\x20\
    applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\nd\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\
    \x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\nSee\x20th\
    e\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permi\
    ssions\x20and\nlimitations\x20under\x20the\x20License.\n================\
    ==============================================================\n\x08\n\
    \x01\x02\x12\x03\x11\0\x16\n]\n\x02\x04\0\x12\x04\x17\0\x20\x01\x1aQ*\n\
    \x20Encapsulates\x20information\x20on\x20a\x20single\x20chart.\x20Many\
    \x20charts\x20appear\x20in\x20a\x20category.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x17\x08\r\nQ\n\x04\x04\0\x02\0\x12\x03\x19\x02\x13\x1aD\x20The\x20t\
    itle\x20shown\x20atop\x20this\x20chart.\x20Optional.\x20Defaults\x20to\
    \x20'untitled'.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x19\x11\x12\nP\n\x04\x04\0\x08\0\x12\x04\x1c\x02\x1f\x03\x1aB\x20Th\
    e\x20content\x20of\x20the\x20chart.\x20This\x20depends\x20on\x20the\x20t\
    ype\x20of\x20the\x20chart.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1c\x08\
    \x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x1d\x04(\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x1d\x04\x19\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1d\
    \x1a#\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1d&'\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x1e\x04\"\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1e\x04\x16\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1e\x17\x1d\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x1e\x20!\n~\n\x02\x04\x01\x12\x04&\0*\x01\x1ar*\n\x20En\
    capsulates\x20information\x20on\x20a\x20single\x20line\x20chart.\x20This\
    \x20line\x20chart\x20may\x20have\n\x20lines\x20associated\x20with\x20sev\
    eral\x20tags.\n\n\n\n\x03\x04\x01\x01\x12\x03&\x08\x1d\n\xa4\x01\n\x04\
    \x04\x01\x02\0\x12\x03)\x02\x1a\x1a\x96\x01\x20A\x20list\x20of\x20regula\
    r\x20expressions\x20for\x20tags\x20that\x20should\x20appear\x20in\x20thi\
    s\x20chart.\n\x20Tags\x20are\x20matched\x20from\x20beginning\x20to\x20en\
    d.\x20Each\x20regex\x20captures\x20a\x20set\x20of\x20tags.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03)\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03)\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03)\x12\x15\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03)\x18\x19\n\x9d\x01\n\x02\x04\x02\x12\x040\0D\x01\
    \x1a\x90\x01*\n\x20Encapsulates\x20information\x20on\x20a\x20single\x20m\
    argin\x20chart.\x20A\x20margin\x20chart\x20uses\x20fill\n\x20area\x20to\
    \x20visualize\x20lower\x20and\x20upper\x20bounds\x20that\x20surround\x20\
    a\x20value.\n\n\n\n\x03\x04\x02\x01\x12\x030\x08\x1a\n;\n\x04\x04\x02\
    \x03\0\x12\x044\x02@\x03\x1a-*\n\x20Encapsulates\x20a\x20tag\x20of\x20da\
    ta\x20for\x20the\x20chart.\n\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x034\n\
    \x10\nx\n\x06\x04\x02\x03\0\x02\0\x12\x037\x04\x15\x1ai\x20The\x20exact\
    \x20tag\x20string\x20associated\x20with\x20the\x20scalar\x20summaries\
    \x20making\x20up\x20the\n\x20main\x20value\x20between\x20the\x20bounds.\
    \n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x05\x12\x037\x04\n\n\x0e\n\x07\x04\
    \x02\x03\0\x02\0\x01\x12\x037\x0b\x10\n\x0e\n\x07\x04\x02\x03\0\x02\0\
    \x03\x12\x037\x13\x14\nf\n\x06\x04\x02\x03\0\x02\x01\x12\x03;\x04\x15\
    \x1aW\x20The\x20exact\x20tag\x20string\x20associated\x20with\x20the\x20s\
    calar\x20summaries\x20making\x20up\x20the\n\x20lower\x20bound.\n\n\x0e\n\
    \x07\x04\x02\x03\0\x02\x01\x05\x12\x03;\x04\n\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x01\x01\x12\x03;\x0b\x10\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\
    \x03;\x13\x14\nf\n\x06\x04\x02\x03\0\x02\x02\x12\x03?\x04\x15\x1aW\x20Th\
    e\x20exact\x20tag\x20string\x20associated\x20with\x20the\x20scalar\x20su\
    mmaries\x20making\x20up\x20the\n\x20upper\x20bound.\n\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x02\x05\x12\x03?\x04\n\n\x0e\n\x07\x04\x02\x03\0\x02\x02\
    \x01\x12\x03?\x0b\x10\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x03?\x13\
    \x14\nI\n\x04\x04\x02\x02\0\x12\x03C\x02\x1d\x1a<\x20A\x20list\x20of\x20\
    data\x20series\x20to\x20include\x20within\x20this\x20margin\x20chart.\n\
    \n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03C\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03C\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03C\x12\x18\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03C\x1b\x1c\nq\n\x02\x04\x03\x12\x04J\
    \0S\x01\x1ae*\n\x20A\x20category\x20contains\x20a\x20group\x20of\x20char\
    ts.\x20Each\x20category\x20maps\x20to\x20a\x20collapsible\n\x20within\
    \x20the\x20dashboard.\n\n\n\n\x03\x04\x03\x01\x12\x03J\x08\x10\nU\n\x04\
    \x04\x03\x02\0\x12\x03L\x02\x13\x1aH\x20This\x20string\x20appears\x20ato\
    p\x20each\x20grouping\x20of\x20charts\x20within\x20the\x20dashboard.\n\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03L\t\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03L\x11\x12\nG\n\
    \x04\x04\x03\x02\x01\x12\x03O\x02\x1b\x1a:\x20Encapsulates\x20data\x20on\
    \x20charts\x20to\x20be\x20shown\x20in\x20the\x20category.\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03O\x0b\x10\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03O\x11\x16\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03O\x19\x1a\nR\n\x04\x04\x03\x02\x02\x12\
    \x03R\x02\x12\x1aE\x20Whether\x20this\x20category\x20should\x20be\x20ini\
    tially\x20closed.\x20False\x20by\x20default.\n\n\x0c\n\x05\x04\x03\x02\
    \x02\x05\x12\x03R\x02\x06\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03R\x07\r\
    \n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03R\x10\x11\nc\n\x02\x04\x04\x12\
    \x04Y\0_\x01\x1aW*\n\x20A\x20layout\x20encapsulates\x20how\x20charts\x20\
    are\x20laid\x20out\x20within\x20the\x20custom\x20scalars\n\x20dashboard.\
    \n\n\n\n\x03\x04\x04\x01\x12\x03Y\x08\x0e\n9\n\x04\x04\x04\x02\0\x12\x03\
    [\x02\x14\x1a,\x20Version\x20`0`\x20is\x20the\x20only\x20supported\x20ve\
    rsion.\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03[\x02\x07\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03[\x08\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03[\
    \x12\x13\nC\n\x04\x04\x04\x02\x01\x12\x03^\x02!\x1a6\x20The\x20categorie\
    s\x20here\x20are\x20rendered\x20from\x20top\x20to\x20bottom.\n\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x03^\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\
    \x12\x03^\x0b\x13\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03^\x14\x1c\n\x0c\
    \n\x05\x04\x04\x02\x01\x03\x12\x03^\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
