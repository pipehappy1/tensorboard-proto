// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/plugin_hparams.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct HParamsPluginData {
    // message fields
    pub version: i32,
    // message oneof groups
    pub data: ::std::option::Option<HParamsPluginData_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HParamsPluginData {
    fn default() -> &'a HParamsPluginData {
        <HParamsPluginData as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HParamsPluginData_oneof_data {
    experiment(super::api::Experiment),
    session_start_info(SessionStartInfo),
    session_end_info(SessionEndInfo),
}

impl HParamsPluginData {
    pub fn new() -> HParamsPluginData {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // .tensorboardrs.hparam.Experiment experiment = 2;


    pub fn get_experiment(&self) -> &super::api::Experiment {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(ref v)) => v,
            _ => <super::api::Experiment as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_experiment(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_experiment(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_experiment(&mut self, v: super::api::Experiment) {
        self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_experiment(&mut self) -> &mut super::api::Experiment {
        if let ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(super::api::Experiment::new()));
        }
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_experiment(&mut self) -> super::api::Experiment {
        if self.has_experiment() {
            match self.data.take() {
                ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(v)) => v,
                _ => panic!(),
            }
        } else {
            super::api::Experiment::new()
        }
    }

    // .tensorboardrs.hparam.SessionStartInfo session_start_info = 3;


    pub fn get_session_start_info(&self) -> &SessionStartInfo {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(ref v)) => v,
            _ => <SessionStartInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_start_info(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_session_start_info(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_start_info(&mut self, v: SessionStartInfo) {
        self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_start_info(&mut self) -> &mut SessionStartInfo {
        if let ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(SessionStartInfo::new()));
        }
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_start_info(&mut self) -> SessionStartInfo {
        if self.has_session_start_info() {
            match self.data.take() {
                ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(v)) => v,
                _ => panic!(),
            }
        } else {
            SessionStartInfo::new()
        }
    }

    // .tensorboardrs.hparam.SessionEndInfo session_end_info = 4;


    pub fn get_session_end_info(&self) -> &SessionEndInfo {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(ref v)) => v,
            _ => <SessionEndInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_end_info(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_session_end_info(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_end_info(&mut self, v: SessionEndInfo) {
        self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_end_info(&mut self) -> &mut SessionEndInfo {
        if let ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(SessionEndInfo::new()));
        }
        match self.data {
            ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_end_info(&mut self) -> SessionEndInfo {
        if self.has_session_end_info() {
            match self.data.take() {
                ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(v)) => v,
                _ => panic!(),
            }
        } else {
            SessionEndInfo::new()
        }
    }
}

impl ::protobuf::Message for HParamsPluginData {
    fn is_initialized(&self) -> bool {
        if let Some(HParamsPluginData_oneof_data::experiment(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HParamsPluginData_oneof_data::session_start_info(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HParamsPluginData_oneof_data::session_end_info(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::experiment(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_start_info(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(HParamsPluginData_oneof_data::session_end_info(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &HParamsPluginData_oneof_data::experiment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HParamsPluginData_oneof_data::session_start_info(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HParamsPluginData_oneof_data::session_end_info(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &HParamsPluginData_oneof_data::experiment(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HParamsPluginData_oneof_data::session_start_info(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HParamsPluginData_oneof_data::session_end_info(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HParamsPluginData {
        HParamsPluginData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &HParamsPluginData| { &m.version },
                |m: &mut HParamsPluginData| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::api::Experiment>(
                "experiment",
                HParamsPluginData::has_experiment,
                HParamsPluginData::get_experiment,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SessionStartInfo>(
                "session_start_info",
                HParamsPluginData::has_session_start_info,
                HParamsPluginData::get_session_start_info,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SessionEndInfo>(
                "session_end_info",
                HParamsPluginData::has_session_end_info,
                HParamsPluginData::get_session_end_info,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HParamsPluginData>(
                "HParamsPluginData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HParamsPluginData {
        static instance: ::protobuf::rt::LazyV2<HParamsPluginData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HParamsPluginData::new)
    }
}

impl ::protobuf::Clear for HParamsPluginData {
    fn clear(&mut self) {
        self.version = 0;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HParamsPluginData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HParamsPluginData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionStartInfo {
    // message fields
    pub hparams: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Value>,
    pub model_uri: ::std::string::String,
    pub monitor_url: ::std::string::String,
    pub group_name: ::std::string::String,
    pub start_time_secs: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStartInfo {
    fn default() -> &'a SessionStartInfo {
        <SessionStartInfo as ::protobuf::Message>::default_instance()
    }
}

impl SessionStartInfo {
    pub fn new() -> SessionStartInfo {
        ::std::default::Default::default()
    }

    // repeated .tensorboardrs.hparam.SessionStartInfo.HparamsEntry hparams = 1;


    pub fn get_hparams(&self) -> &::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Value> {
        &self.hparams
    }
    pub fn clear_hparams(&mut self) {
        self.hparams.clear();
    }

    // Param is passed by value, moved
    pub fn set_hparams(&mut self, v: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Value>) {
        self.hparams = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hparams(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Value> {
        &mut self.hparams
    }

    // Take field
    pub fn take_hparams(&mut self) -> ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Value> {
        ::std::mem::replace(&mut self.hparams, ::std::collections::HashMap::new())
    }

    // string model_uri = 2;


    pub fn get_model_uri(&self) -> &str {
        &self.model_uri
    }
    pub fn clear_model_uri(&mut self) {
        self.model_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_model_uri(&mut self, v: ::std::string::String) {
        self.model_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_uri(&mut self) -> &mut ::std::string::String {
        &mut self.model_uri
    }

    // Take field
    pub fn take_model_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model_uri, ::std::string::String::new())
    }

    // string monitor_url = 3;


    pub fn get_monitor_url(&self) -> &str {
        &self.monitor_url
    }
    pub fn clear_monitor_url(&mut self) {
        self.monitor_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_monitor_url(&mut self, v: ::std::string::String) {
        self.monitor_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_monitor_url(&mut self) -> &mut ::std::string::String {
        &mut self.monitor_url
    }

    // Take field
    pub fn take_monitor_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.monitor_url, ::std::string::String::new())
    }

    // string group_name = 4;


    pub fn get_group_name(&self) -> &str {
        &self.group_name
    }
    pub fn clear_group_name(&mut self) {
        self.group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_name(&mut self, v: ::std::string::String) {
        self.group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.group_name
    }

    // Take field
    pub fn take_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_name, ::std::string::String::new())
    }

    // double start_time_secs = 5;


    pub fn get_start_time_secs(&self) -> f64 {
        self.start_time_secs
    }
    pub fn clear_start_time_secs(&mut self) {
        self.start_time_secs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_start_time_secs(&mut self, v: f64) {
        self.start_time_secs = v;
    }
}

impl ::protobuf::Message for SessionStartInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Value>>(wire_type, is, &mut self.hparams)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model_uri)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.monitor_url)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.start_time_secs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Value>>(1, &self.hparams);
        if !self.model_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.model_uri);
        }
        if !self.monitor_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.monitor_url);
        }
        if !self.group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.group_name);
        }
        if self.start_time_secs != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Value>>(1, &self.hparams, os)?;
        if !self.model_uri.is_empty() {
            os.write_string(2, &self.model_uri)?;
        }
        if !self.monitor_url.is_empty() {
            os.write_string(3, &self.monitor_url)?;
        }
        if !self.group_name.is_empty() {
            os.write_string(4, &self.group_name)?;
        }
        if self.start_time_secs != 0. {
            os.write_double(5, self.start_time_secs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStartInfo {
        SessionStartInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Value>>(
                "hparams",
                |m: &SessionStartInfo| { &m.hparams },
                |m: &mut SessionStartInfo| { &mut m.hparams },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "model_uri",
                |m: &SessionStartInfo| { &m.model_uri },
                |m: &mut SessionStartInfo| { &mut m.model_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "monitor_url",
                |m: &SessionStartInfo| { &m.monitor_url },
                |m: &mut SessionStartInfo| { &mut m.monitor_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_name",
                |m: &SessionStartInfo| { &m.group_name },
                |m: &mut SessionStartInfo| { &mut m.group_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "start_time_secs",
                |m: &SessionStartInfo| { &m.start_time_secs },
                |m: &mut SessionStartInfo| { &mut m.start_time_secs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStartInfo>(
                "SessionStartInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStartInfo {
        static instance: ::protobuf::rt::LazyV2<SessionStartInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStartInfo::new)
    }
}

impl ::protobuf::Clear for SessionStartInfo {
    fn clear(&mut self) {
        self.hparams.clear();
        self.model_uri.clear();
        self.monitor_url.clear();
        self.group_name.clear();
        self.start_time_secs = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStartInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStartInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionEndInfo {
    // message fields
    pub status: super::api::Status,
    pub end_time_secs: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionEndInfo {
    fn default() -> &'a SessionEndInfo {
        <SessionEndInfo as ::protobuf::Message>::default_instance()
    }
}

impl SessionEndInfo {
    pub fn new() -> SessionEndInfo {
        ::std::default::Default::default()
    }

    // .tensorboardrs.hparam.Status status = 1;


    pub fn get_status(&self) -> super::api::Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::api::Status::STATUS_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::api::Status) {
        self.status = v;
    }

    // double end_time_secs = 2;


    pub fn get_end_time_secs(&self) -> f64 {
        self.end_time_secs
    }
    pub fn clear_end_time_secs(&mut self) {
        self.end_time_secs = 0.;
    }

    // Param is passed by value, moved
    pub fn set_end_time_secs(&mut self, v: f64) {
        self.end_time_secs = v;
    }
}

impl ::protobuf::Message for SessionEndInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.end_time_secs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != super::api::Status::STATUS_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.end_time_secs != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != super::api::Status::STATUS_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.end_time_secs != 0. {
            os.write_double(2, self.end_time_secs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionEndInfo {
        SessionEndInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::api::Status>>(
                "status",
                |m: &SessionEndInfo| { &m.status },
                |m: &mut SessionEndInfo| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "end_time_secs",
                |m: &SessionEndInfo| { &m.end_time_secs },
                |m: &mut SessionEndInfo| { &mut m.end_time_secs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionEndInfo>(
                "SessionEndInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionEndInfo {
        static instance: ::protobuf::rt::LazyV2<SessionEndInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionEndInfo::new)
    }
}

impl ::protobuf::Clear for SessionEndInfo {
    fn clear(&mut self) {
        self.status = super::api::Status::STATUS_UNKNOWN;
        self.end_time_secs = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionEndInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionEndInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18src/plugin_hparams.proto\x12\x14tensorboardrs.hparam\x1a\rsrc/api.\
    proto\x1a\x1cgoogle/protobuf/struct.proto\"\xa3\x02\n\x11HParamsPluginDa\
    ta\x12\x18\n\x07version\x18\x01\x20\x01(\x05R\x07version\x12B\n\nexperim\
    ent\x18\x02\x20\x01(\x0b2\x20.tensorboardrs.hparam.ExperimentH\0R\nexper\
    iment\x12V\n\x12session_start_info\x18\x03\x20\x01(\x0b2&.tensorboardrs.\
    hparam.SessionStartInfoH\0R\x10sessionStartInfo\x12P\n\x10session_end_in\
    fo\x18\x04\x20\x01(\x0b2$.tensorboardrs.hparam.SessionEndInfoH\0R\x0eses\
    sionEndInfoB\x06\n\x04data\"\xba\x02\n\x10SessionStartInfo\x12M\n\x07hpa\
    rams\x18\x01\x20\x03(\x0b23.tensorboardrs.hparam.SessionStartInfo.Hparam\
    sEntryR\x07hparams\x12\x1b\n\tmodel_uri\x18\x02\x20\x01(\tR\x08modelUri\
    \x12\x1f\n\x0bmonitor_url\x18\x03\x20\x01(\tR\nmonitorUrl\x12\x1d\n\ngro\
    up_name\x18\x04\x20\x01(\tR\tgroupName\x12&\n\x0fstart_time_secs\x18\x05\
    \x20\x01(\x01R\rstartTimeSecs\x1aR\n\x0cHparamsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.go\
    ogle.protobuf.ValueR\x05value:\x028\x01\"j\n\x0eSessionEndInfo\x124\n\
    \x06status\x18\x01\x20\x01(\x0e2\x1c.tensorboardrs.hparam.StatusR\x06sta\
    tus\x12\"\n\rend_time_secs\x18\x02\x20\x01(\x01R\x0bendTimeSecsJ\xc0\x17\
    \n\x06\x12\x04\x1c\0J\x01\n\xdb\x0b\n\x01\x0c\x12\x03\x1c\0\x122\x94\x05\
    \x20Copyright\x202019\x20The\x20TensorFlow\x20Authors.\x20All\x20Rights\
    \x20Reserved.\n\nLicensed\x20under\x20the\x20Apache\x20License,\x20Versi\
    on\x202.0\x20(the\x20\"License\");\nyou\x20may\x20not\x20use\x20this\x20\
    file\x20except\x20in\x20compliance\x20with\x20the\x20License.\nYou\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\nhttp://www.apa\
    che.org/licenses/LICENSE-2.0\n\nUnless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\ndistributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\
    \x20KIND,\x20either\x20express\x20or\x20implied.\nSee\x20the\x20License\
    \x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20an\
    d\nlimitations\x20under\x20the\x20License.\n============================\
    ==================================================2\xb9\x06\x20Defines\
    \x20protos\x20for\x20storing\x20a\x20hypertuning\x20experiment\x20data\
    \x20inside\x20Summary\x20tags.\n\n\x20A\x20hypertuning-experiment\x20dat\
    a\x20consists\x20of\x20metadata\x20that's\x20constant\n\x20throughout\
    \x20the\x20experiment\x20and\x20evolving\x20metric\x20data\x20for\x20eac\
    h\x20training\x20session\n\x20in\x20the\x20experiment.\x20The\x20HParams\
    \x20plugin\x20assumes\x20the\x20following\x20organization\x20of\n\x20thi\
    s\x20entire\x20data\x20set.\x20Experiment\x20metadata\x20is\x20recorded\
    \x20in\x20the\x20empty\x20run\x20in\x20a\n\x20tag\x20(named\x20by\x20the\
    \x20Python\x20constant)\x20metadata.EXPERIMENT_TAG.\x20Within\x20the\n\
    \x20experiment,\x20for\x20a\x20session\x20named\x20by\x20<session_name>\
    \x20its\x20metadata\x20is\x20recorded\n\x20in\x20the\x20run\x20<session_\
    name>\x20in\x20the\x20tags\x20metadata.SESSION_START_INFO\x20and\n\x20me\
    tadata.SESSION_END_INFO.\x20Finally,\x20the\x20session's\x20metric\x20da\
    ta\x20for\x20a\x20metric\n\x20with\x20a\x20(<group>,\x20<tag>)\x20name\
    \x20(see\x20MetricName\x20in\x20api.proto),\x20is\x20recorded\n\x20in\
    \x20a\x20Scalar-plugin\x20summary\x20with\x20tag\x20<tag>\x20in\x20the\
    \x20run\x20<session_name><group>.\n\n\t\n\x02\x03\0\x12\x03\x1e\0\x17\n\
    \t\n\x02\x03\x01\x12\x03\x1f\0&\n\x08\n\x01\x02\x12\x03!\0\x1d\n\xcb\x01\
    \n\x02\x04\0\x12\x04&\0.\x01\x1a\xbe\x01\x20HParam\x20summaries\x20creat\
    ed\x20by\x20`tensorboard.plugins.hparams.summary`\n\x20module\x20will\
    \x20include\x20`SummaryMetadata`\x20whose\x20`plugin_data`\x20field\x20h\
    as\n\x20as\x20`content`\x20a\x20serialized\x20HParamsPluginData\x20messa\
    ge.\n\n\n\n\x03\x04\0\x01\x12\x03&\x08\x19\n5\n\x04\x04\0\x02\0\x12\x03(\
    \x02\x14\x1a(\x20The\x20version\x20of\x20the\x20plugin\x20data\x20schema\
    .\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03(\x02\x07\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03(\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03(\x12\x13\n\x0c\
    \n\x04\x04\0\x08\0\x12\x04)\x02-\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\
    )\x08\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03*\x04\x1e\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03*\x04\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\x0f\
    \x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03*\x1c\x1d\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03+\x04,\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03+\x04\x14\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03+\x15'\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03+*+\n\x0b\n\x04\x04\0\x02\x03\x12\x03,\x04(\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03,\x04\x12\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03,\x13\
    #\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03,&'\n\n\n\x02\x04\x01\x12\x040\0C\
    \x01\n\n\n\x03\x04\x01\x01\x12\x030\x08\x18\n\x9f\x01\n\x04\x04\x01\x02\
    \0\x12\x034\x021\x1a\x91\x01\x20A\x20map\x20describing\x20the\x20hyperpa\
    rameter\x20values\x20for\x20the\x20session.\n\x20Maps\x20each\x20hyperpa\
    rameter\x20name\x20to\x20its\x20value.\n\x20Currently\x20only\x20scalars\
    \x20are\x20supported.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x034\x02$\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x034%,\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x034/0\n5\n\x04\x04\x01\x02\x01\x12\x037\x02\x17\x1a(\x20A\x20URI\
    \x20for\x20where\x20checkpoints\x20are\x20saved.\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x037\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x037\t\
    \x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x037\x15\x16\nC\n\x04\x04\x01\
    \x02\x02\x12\x03:\x02\x19\x1a6\x20An\x20optional\x20URL\x20to\x20a\x20we\
    bsite\x20monitoring\x20the\x20session.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03:\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03:\t\x14\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03:\x17\x18\n\xb2\x01\n\x04\x04\x01\x02\
    \x03\x12\x03?\x02\x18\x1a\xa4\x01\x20The\x20name\x20of\x20the\x20session\
    \x20group\x20containing\x20this\x20session.\x20If\x20empty,\x20the\n\x20\
    group\x20name\x20is\x20taken\x20to\x20be\x20the\x20session\x20id\x20(so\
    \x20this\x20session\x20is\x20the\x20only\n\x20member\x20of\x20its\x20gro\
    up).\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03?\t\x13\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03?\
    \x16\x17\nC\n\x04\x04\x01\x02\x04\x12\x03B\x02\x1d\x1a6\x20The\x20time\
    \x20the\x20session\x20started\x20in\x20seconds\x20since\x20epoch.\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x05\x12\x03B\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03B\t\x18\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03B\x1b\x1c\
    \n\n\n\x02\x04\x02\x12\x04E\0J\x01\n\n\n\x03\x04\x02\x01\x12\x03E\x08\
    \x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03F\x02\x14\n\x0c\n\x05\x04\x02\x02\
    \0\x06\x12\x03F\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\t\x0f\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03F\x12\x13\nA\n\x04\x04\x02\x02\x01\
    \x12\x03I\x02\x1b\x1a4\x20The\x20time\x20the\x20session\x20ended\x20in\
    \x20seconds\x20since\x20epoch.\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    I\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03I\t\x16\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03I\x19\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
