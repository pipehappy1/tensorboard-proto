// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/tensorboardrs/proto/plugin_mesh.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct MeshPluginData {
    // message fields
    pub version: i32,
    pub name: ::std::string::String,
    pub content_type: MeshPluginData_ContentType,
    pub json_config: ::std::string::String,
    pub shape: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MeshPluginData {
    fn default() -> &'a MeshPluginData {
        <MeshPluginData as ::protobuf::Message>::default_instance()
    }
}

impl MeshPluginData {
    pub fn new() -> MeshPluginData {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorboardrs.mesh.MeshPluginData.ContentType content_type = 3;


    pub fn get_content_type(&self) -> MeshPluginData_ContentType {
        self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type = MeshPluginData_ContentType::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: MeshPluginData_ContentType) {
        self.content_type = v;
    }

    // string json_config = 5;


    pub fn get_json_config(&self) -> &str {
        &self.json_config
    }
    pub fn clear_json_config(&mut self) {
        self.json_config.clear();
    }

    // Param is passed by value, moved
    pub fn set_json_config(&mut self, v: ::std::string::String) {
        self.json_config = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json_config(&mut self) -> &mut ::std::string::String {
        &mut self.json_config
    }

    // Take field
    pub fn take_json_config(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.json_config, ::std::string::String::new())
    }

    // repeated int32 shape = 6;


    pub fn get_shape(&self) -> &[i32] {
        &self.shape
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ::std::vec::Vec<i32>) {
        self.shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.shape
    }

    // Take field
    pub fn take_shape(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.shape, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MeshPluginData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.content_type, 3, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.json_config)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.shape)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.content_type != MeshPluginData_ContentType::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(3, self.content_type);
        }
        if !self.json_config.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.json_config);
        }
        for value in &self.shape {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.content_type != MeshPluginData_ContentType::UNDEFINED {
            os.write_enum(3, self.content_type.value())?;
        }
        if !self.json_config.is_empty() {
            os.write_string(5, &self.json_config)?;
        }
        for v in &self.shape {
            os.write_int32(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MeshPluginData {
        MeshPluginData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &MeshPluginData| { &m.version },
                    |m: &mut MeshPluginData| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MeshPluginData| { &m.name },
                    |m: &mut MeshPluginData| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MeshPluginData_ContentType>>(
                    "content_type",
                    |m: &MeshPluginData| { &m.content_type },
                    |m: &mut MeshPluginData| { &mut m.content_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "json_config",
                    |m: &MeshPluginData| { &m.json_config },
                    |m: &mut MeshPluginData| { &mut m.json_config },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "shape",
                    |m: &MeshPluginData| { &m.shape },
                    |m: &mut MeshPluginData| { &mut m.shape },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<MeshPluginData>(
                    "MeshPluginData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MeshPluginData {
        static mut instance: ::protobuf::lazy::Lazy<MeshPluginData> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(MeshPluginData::new)
        }
    }
}

impl ::protobuf::Clear for MeshPluginData {
    fn clear(&mut self) {
        self.version = 0;
        self.name.clear();
        self.content_type = MeshPluginData_ContentType::UNDEFINED;
        self.json_config.clear();
        self.shape.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MeshPluginData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MeshPluginData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MeshPluginData_ContentType {
    UNDEFINED = 0,
    VERTEX = 1,
    FACE = 2,
    COLOR = 3,
}

impl ::protobuf::ProtobufEnum for MeshPluginData_ContentType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MeshPluginData_ContentType> {
        match value {
            0 => ::std::option::Option::Some(MeshPluginData_ContentType::UNDEFINED),
            1 => ::std::option::Option::Some(MeshPluginData_ContentType::VERTEX),
            2 => ::std::option::Option::Some(MeshPluginData_ContentType::FACE),
            3 => ::std::option::Option::Some(MeshPluginData_ContentType::COLOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MeshPluginData_ContentType] = &[
            MeshPluginData_ContentType::UNDEFINED,
            MeshPluginData_ContentType::VERTEX,
            MeshPluginData_ContentType::FACE,
            MeshPluginData_ContentType::COLOR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<MeshPluginData_ContentType>("MeshPluginData.ContentType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MeshPluginData_ContentType {
}

impl ::std::default::Default for MeshPluginData_ContentType {
    fn default() -> Self {
        MeshPluginData_ContentType::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for MeshPluginData_ContentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)src/tensorboardrs/proto/plugin_mesh.proto\x12\x12tensorboardrs.mesh\"\
    \x87\x02\n\x0eMeshPluginData\x12\x18\n\x07version\x18\x01\x20\x01(\x05R\
    \x07version\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12Q\n\x0ccont\
    ent_type\x18\x03\x20\x01(\x0e2..tensorboardrs.mesh.MeshPluginData.Conten\
    tTypeR\x0bcontentType\x12\x1f\n\x0bjson_config\x18\x05\x20\x01(\tR\njson\
    Config\x12\x14\n\x05shape\x18\x06\x20\x03(\x05R\x05shape\"=\n\x0bContent\
    Type\x12\r\n\tUNDEFINED\x10\0\x12\n\n\x06VERTEX\x10\x01\x12\x08\n\x04FAC\
    E\x10\x02\x12\t\n\x05COLOR\x10\x03J\xc5\x07\n\x06\x12\x04\0\0\x1c\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1b\nz\n\
    \x02\x04\0\x12\x04\x06\0\x1c\x01\x1an\x20A\x20MeshPluginData\x20encapsul\
    ates\x20information\x20on\x20which\x20plugins\x20are\x20able\x20to\x20ma\
    ke\n\x20use\x20of\x20a\x20certain\x20summary\x20value.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x06\x08\x16\n\x0c\n\x04\x04\0\x04\0\x12\x04\x07\x02\x0c\x03\
    \n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x07\x07\x12\n\r\n\x06\x04\0\x04\0\
    \x02\0\x12\x03\x08\x04\x12\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x08\
    \x04\r\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x08\x10\x11\n\r\n\x06\
    \x04\0\x04\0\x02\x01\x12\x03\t\x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x01\x12\x03\t\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\t\r\x0e\
    \n\x1f\n\x06\x04\0\x04\0\x02\x02\x12\x03\n\x04\r\"\x10\x20Triangle\x20fa\
    ce.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\n\x04\x08\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x02\x12\x03\n\x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x03\
    \x12\x03\x0b\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\x0b\x04\
    \t\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03\x0b\x0c\r\n9\n\x04\x04\0\
    \x02\0\x12\x03\x0f\x02\x14\x1a,\x20Version\x20`0`\x20is\x20the\x20only\
    \x20supported\x20version.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\x02\
    \x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x08\x0f\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x0f\x12\x13\nO\n\x04\x04\0\x02\x01\x12\x03\x12\x02\
    \x12\x1aB\x20The\x20name\x20of\x20the\x20mesh\x20summary\x20this\x20part\
    icular\x20summary\x20belongs\x20to.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x12\t\r\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x12\x10\x11\n+\n\x04\x04\0\x02\x02\x12\
    \x03\x15\x02\x1f\x1a\x1e\x20Type\x20of\x20data\x20in\x20the\x20summary.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x15\x02\r\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x15\x0e\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x15\
    \x1d\x1e\nK\n\x04\x04\0\x02\x03\x12\x03\x18\x02\x19\x1a>\x20JSON-seriali\
    zed\x20dictionary\x20of\x20ThreeJS\x20classes\x20configuration.\n\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x18\t\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x18\x17\x18\
    \nO\n\x04\x04\0\x02\x04\x12\x03\x1b\x02\x1b\x1aB\x20Shape\x20of\x20under\
    lying\x20data.\x20Cache\x20it\x20here\x20for\x20performance\x20reasons.\
    \n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03\x1b\x0b\x10\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1b\
    \x11\x16\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1b\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
