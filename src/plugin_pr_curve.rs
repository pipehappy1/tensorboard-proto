// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/tensorboardrs/proto/plugin_pr_curve.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct PrCurvePluginData {
    // message fields
    pub version: i32,
    pub num_thresholds: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrCurvePluginData {
    fn default() -> &'a PrCurvePluginData {
        <PrCurvePluginData as ::protobuf::Message>::default_instance()
    }
}

impl PrCurvePluginData {
    pub fn new() -> PrCurvePluginData {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // uint32 num_thresholds = 2;


    pub fn get_num_thresholds(&self) -> u32 {
        self.num_thresholds
    }
    pub fn clear_num_thresholds(&mut self) {
        self.num_thresholds = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_thresholds(&mut self, v: u32) {
        self.num_thresholds = v;
    }
}

impl ::protobuf::Message for PrCurvePluginData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_thresholds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_thresholds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_thresholds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        if self.num_thresholds != 0 {
            os.write_uint32(2, self.num_thresholds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrCurvePluginData {
        PrCurvePluginData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &PrCurvePluginData| { &m.version },
                    |m: &mut PrCurvePluginData| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "num_thresholds",
                    |m: &PrCurvePluginData| { &m.num_thresholds },
                    |m: &mut PrCurvePluginData| { &mut m.num_thresholds },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PrCurvePluginData>(
                    "PrCurvePluginData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PrCurvePluginData {
        static mut instance: ::protobuf::lazy::Lazy<PrCurvePluginData> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PrCurvePluginData::new)
        }
    }
}

impl ::protobuf::Clear for PrCurvePluginData {
    fn clear(&mut self) {
        self.version = 0;
        self.num_thresholds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrCurvePluginData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrCurvePluginData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-src/tensorboardrs/proto/plugin_pr_curve.proto\x12\rtensorboardrs\"T\n\
    \x11PrCurvePluginData\x12\x18\n\x07version\x18\x01\x20\x01(\x05R\x07vers\
    ion\x12%\n\x0enum_thresholds\x18\x02\x20\x01(\rR\rnumThresholdsJ\xe8\x06\
    \n\x06\x12\x04\x0f\0\x18\x01\n\x9f\x05\n\x01\x0c\x12\x03\x0f\0\x122\x94\
    \x05\x20Copyright\x202017\x20The\x20TensorFlow\x20Authors.\x20All\x20Rig\
    hts\x20Reserved.\n\nLicensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\nyou\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\nYou\
    \x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\nhttp://w\
    ww.apache.org/licenses/LICENSE-2.0\n\nUnless\x20required\x20by\x20applic\
    able\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\ndistrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\nSee\x20the\x20Licens\
    e\x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20a\
    nd\nlimitations\x20under\x20the\x20License.\n===========================\
    ===================================================\n\x08\n\x01\x02\x12\
    \x03\x11\0\x16\n\n\n\x02\x04\0\x12\x04\x13\0\x18\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x13\x08\x19\n9\n\x04\x04\0\x02\0\x12\x03\x15\x02\x14\x1a,\x20Ve\
    rsion\x20`0`\x20is\x20the\x20only\x20supported\x20version.\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x15\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\x12\x13\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x17\x02\x1c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x17\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x17\t\x17\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x17\x1a\x1bb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
